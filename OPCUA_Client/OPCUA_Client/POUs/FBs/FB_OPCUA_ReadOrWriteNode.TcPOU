<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_OPCUA_ReadOrWriteNode" Id="{0e3c7aeb-71ed-4c55-86bf-e2c7680b355d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_OPCUA_ReadOrWriteNode IMPLEMENTS I_OPCUA_WorkOnNode
VAR_INPUT
END_VAR
VAR_OUTPUT
	busy: BOOL;
	error : BOOL;
END_VAR
VAR
	nameSpaceLocationIdentifierEx : STRING(MAX_STRING_LENGTH); 
	fbUA_ConnectEx			: UA_Connect;
	SessionConnectInfoEx	: ST_UASessionConnectInfo;
	nConnectionHdl			: DWORD;
//	clientVariableInfo	: __SYSTEM.VAR_INFO;
	
	fbUA_GetNamespaceIndex 	: UA_GetNamespaceIndex;
	nNamespaceIndex			: UINT;
	fbUA_NodeGetHandleList	: UA_NodeGetHandleList;
	
	NodeIDs					: ARRAY [1..nMaxNodeIDsInList] OF ST_UANodeID;
	nNodeHdls				: ARRAY [1..nMaxNodeIDsInList] OF DWORD;

	fbUA_Read			: UA_Read;
	NodeIDCount				: UINT := 4;
	NodeHdlCount			: UINT := 4; 
	nIndexRangeCount		: UINT;
	stNodeAddInfo			: ST_UANodeAdditionalInfo;
	cbData					: UDINT; (* Bytes to be actually Read *)
	cbData_R				: UDINT;
	cbDataTotal				: UDINT; 
	
	fbUA_NodeReleaseHandleList	: UA_NodeReleaseHandleList;

	fbUA_Disconnect		: UA_Disconnect;

	iState		: INT;
	bDone		: BOOL;
	bBusy		: BOOL;
	nErrorID	: DWORD;
	node: INT;
	dataAdd : PVOID;
	lastErrorStep: INT;
	readToggle : FB_ToggleHeartBeat;
	//stReadListData			: ST_ReadDataList; // memory block must contain the Data[], NodeErrorIDs[], TimeStamps[] and cbData_R[]
	nameSpaceUriEx: STRING(MAX_STRING_LENGTH);
	serverURLex: STRING(MAX_STRING_LENGTH);
	bError : BOOL;
	Executing : BOOL;
	writeStep : INT;
	(* Declarations for UA_Write *)
	fbUA_Write : UA_Write; 
	
	(* Declarations for UA_NodeReleaseHandle *)
	fbUA_NodeReleaseHandle : UA_NodeReleaseHandle;
	
	
	(* Other declarations *) 
	errorID : DWORD;	
	clientVariablePrev : BYTE;
	firstTimeWrite : BOOL;
	variable: INT;
	prepareStep: INT;
		fbUA_NodeGetHandle : UA_NodeGetHandle;
	NodeID : ST_UANodeID;
	nNodeHdl : DWORD;
//	error : BOOL;
	//busy: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="read" Id="{03c3b3f3-09be-48e8-a71a-d9f38d3c1c07}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD read : BOOL
VAR_INPUT
	{attribute 'anytypeclass' := 'ANY'}
	clientVariable	: ANY;
	(* VAR_INFO of the target variable (from GVL_OPC)*)
	clientVariableInfo	: __SYSTEM.VAR_INFO;
	serverNodeIdentifier	: STRING;
	nameSpaceLocationIdentifierEx	: STRING(MAX_STRING_LENGTH);
	ConnectionHdl	: DWORD;
	nNamespaceIndex			: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE istate OF
0: (* Compile node id's *)
//	FOR node := 1 TO 4 DO
//		IF clientVariable[node] <> '' THEN
//			NodeIds[node].eIdentifierType := eUAIdentifierType_String;
//			NodeIDs[node].nNamespaceIndex := nNamespaceIndex;
//			NodeIDs[node].sIdentifier	:= CONCAT(nameSpaceLocationIdentifierEx ,clientVariable[node]);
//		END_IF
//		IF node = 4 THEN
			error := FALSE;
			nNodeHdl :=0;
			Executing := TRUE;
			iState := iState + 1;
//		END_IF
//	END_FOR

	
1:	(* Get Node Handle *)
	
		(* UA_NodeGetHandle *)
		NodeID.eIdentifierType := eUAIdentifierType_String;
		NodeID.nNamespaceIndex := nNamespaceIndex;
		NodeID.sIdentifier := CONCAT(nameSpaceLocationIdentifierEx,serverNodeIdentifier);
		fbUA_NodeGetHandle(
		  Execute := TRUE,
		  ConnectionHdl := connectionHdl,
		  NodeID := NodeID,
		  NodeHdl => nNodeHdl);
		IF NOT fbUA_NodeGetHandle.Busy THEN
		  fbUA_NodeGetHandle(Execute := FALSE);
		  IF NOT fbUA_NodeGetHandle.Error THEN
			istate := istate + 1;
		  ELSE
			//Executing := FALSE;
			//error := TRUE;
			errorID := fbUA_NodeGetHandle.ErrorID;
			istate := 3;
		  END_IF
		END_IF

	
2: 	(* UA_Read *)

	dataAdd := ADR(clientVariable);
	fbUA_Read(
		  Execute := TRUE,
		  ConnectionHdl := connectionHdl,
		  NodeHdl := nNodeHdl,
		  cbData := SIZEOF(clientVariable),//clientVariableInfo.BitSize,
		stNodeAddInfo 	:= stNodeAddInfo,
		  pVariable :=clientVariableInfo.ByteAddress	
		);

	IF NOT fbUA_Read.Busy THEN
//		readToggle(I_TimeIntervalSecs := 0.1);
//		IF readTOggle.O_Update THEN
			fbUA_Read( Execute := FALSE, cbData_R => cbData_R);
//		END_IF
		//fbUA_ReadList( Execute := FALSE, cbData_R => cbData_R);

		IF NOT fbUA_Read.Error THEN
			(* session closed *)
			//iState 		:= iState + 1; 
			iState 		:= 3;
		ELSE
			//bError		:= TRUE;
			//error := TRUE;
			lastErrorStep := 2;
			nErrorID	:= fbUA_Read.ErrorID;
			iState 		:= 3; (* idle *)
		END_IF
	END_IF


3:	(* Release Node Handle *)
		fbUA_NodeReleaseHandle(
			Execute			:= TRUE,
			ConnectionHdl	:= ConnectionHdl,
			NodeHdl			:= nNodeHdl
		);
	
		IF NOT fbUA_NodeReleaseHandle.Busy THEN
			fbUA_NodeReleaseHandle(Execute := FALSE);
	
			IF NOT fbUA_NodeReleaseHandle.Error THEN
				Executing := FALSE;
				istate := 0;
			ELSE
				//Executing := FALSE;
				//error		:= TRUE;
				error := TRUE;
				errorID	:= fbUA_NodeReleaseHandle.ErrorID;
				istate 	:= 0; (* idle *)
			END_IF
		END_IF
END_CASE
busy := Executing;]]></ST>
      </Implementation>
    </Method>
    <Method Name="write" Id="{64b5c044-7dd9-4728-a1be-b684ca04e6b0}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD write : BOOL
VAR_INPUT
	{attribute 'anytypeclass' := 'ANY'}
	clientVariable	: ANY;
	(* VAR_INFO of the target variable (from GVL_OPC)*)
	clientVariableInfo	: __SYSTEM.VAR_INFO;
	serverNodeIdentifier	: STRING;
	nameSpaceLocationIdentifierEx	: STRING(MAX_STRING_LENGTH);
	connectionHdl: DWORD;
	nNamespaceIndex			: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE writeStep OF
	
	0:
		error := FALSE;
		IF clientVariable.pValue^ <> clientVariablePrev OR NOT firstTimeWrite THEN
//		IF clientVariable.pValue <> clientVariablePrev OR NOT firstTimeWrite THEN
			Executing := TRUE;
			clientVariablePrev := clientVariable.pValue^;
			writeStep := 1;
		END_IF
	
	  1: 
//		Executing := TRUE;
		(* UA_NodeGetHandle *)
		NodeID.eIdentifierType := eUAIdentifierType_String;
		NodeID.nNamespaceIndex := nNamespaceIndex;
		NodeID.sIdentifier := CONCAT(nameSpaceLocationIdentifierEx,serverNodeIdentifier);
		fbUA_NodeGetHandle(
		  Execute := TRUE,
		  ConnectionHdl := connectionHdl,
		  NodeID := NodeID,
		  NodeHdl => nNodeHdl);
		IF NOT fbUA_NodeGetHandle.Busy THEN
		  fbUA_NodeGetHandle(Execute := FALSE);
		  IF NOT fbUA_NodeGetHandle.Error THEN
			writeStep := writeStep + 1;
		  ELSE
			//Executing := FALSE;
			//error := TRUE;
			errorID := fbUA_NodeGetHandle.ErrorID;
			writeStep := 2;
		  END_IF
		END_IF
	  2: (* UA_Write *)
//		writeDone := FALSE;
		fbUA_Write(
		  Execute := TRUE,
		  ConnectionHdl := connectionHdl,
		  NodeHdl := nNodeHdl,
		  stNodeAddInfo := stNodeAddInfo,
		  cbData := clientVariableInfo.BitSize,
		  pVariable := clientVariableInfo.ByteAddress);
		IF NOT fbUA_Write.Busy THEN
		  fbUA_Write(
			Execute := FALSE,
			pVariable := clientVariableInfo.ByteAddress);
		
		  IF NOT fbUA_Write.Error THEN
//				writeDone := TRUE;
			//writeStep := writeStep + 1;
				writeStep := 3;
		  ELSE
			//Executing := FALSE;
			error := TRUE;
			errorID := fbUA_Write.ErrorID;
			writeStep := 3;
		  END_IF
		END_IF
	3:	(* Release Node Handle *)
		fbUA_NodeReleaseHandle(
			Execute			:= TRUE,
			ConnectionHdl	:= ConnectionHdl,
			NodeHdl			:= nNodeHdl
		);
	
		IF NOT fbUA_NodeReleaseHandle.Busy THEN
			fbUA_NodeReleaseHandle(Execute := FALSE);
	
			IF NOT fbUA_NodeReleaseHandle.Error THEN
				firstTimeWrite := TRUE;
//				clientVariablePrev := clientVariable.pValue^;
				Executing := FALSE;
				writeStep := 0;
			ELSE
				//Executing := FALSE;
				//error		:= TRUE;
				error := TRUE;
				errorID	:= fbUA_NodeReleaseHandle.ErrorID;
				writeStep 	:= 0; (* idle *)
			END_IF
		END_IF
END_CASE
busy := Executing ;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_OPCUA_ReadOrWriteNode">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_OPCUA_ReadOrWriteNode.read">
      <LineId Id="23" Count="8" />
      <LineId Id="175" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="32" Count="6" />
      <LineId Id="115" Count="18" />
      <LineId Id="59" Count="9" />
      <LineId Id="70" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="71" Count="2" />
      <LineId Id="156" Count="1" />
      <LineId Id="74" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="80" Count="6" />
      <LineId Id="161" Count="0" />
      <LineId Id="87" Count="7" />
      <LineId Id="135" Count="14" />
      <LineId Id="162" Count="0" />
      <LineId Id="150" Count="2" />
      <LineId Id="114" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="155" Count="0" />
    </LineIds>
    <LineIds Name="FB_OPCUA_ReadOrWriteNode.write">
      <LineId Id="25" Count="2" />
      <LineId Id="106" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="30" Count="40" />
      <LineId Id="73" Count="19" />
      <LineId Id="103" Count="1" />
      <LineId Id="93" Count="4" />
      <LineId Id="105" Count="0" />
      <LineId Id="98" Count="4" />
      <LineId Id="22" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>